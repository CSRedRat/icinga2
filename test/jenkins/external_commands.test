#!/usr/bin/env python
from __future__ import unicode_literals

import sys
import time
import random
import subprocess

try:
    from subprocess import DEVNULL
except ImportError:
    from os import devnull
    DEVNULL = open(devnull, 'w')

import utils


USERNAME = 'Icinga 2 Admin'
MAX_CHECK_ATTEMPTS = 3


def send_command(command):
    try:
        return send_query('COMMAND [{0}] {1}'.format(int(time.time()), command))
    except utils.LiveStatusError, error:
        sys.stderr.write('Failed to execute command: {0}\n\n{1}'.format(command, error))


def send_query(query):
    response = LIVESTATUS.query(query + '\nColumnHeaders: on')
    if response:
        header, result = response.pop(0), {}
        return [dict((header[i], v) for i, v in enumerate(r)) for r in response]
    return []


def get_one(query):
    return next(iter(send_query(query)), {})


def restart_icinga():
    LIVESTATUS.close()
    subprocess.check_call('sudo service icinga2 restart', shell=True, stdout=DEVNULL)
    LIVESTATUS.reconnect()


def success(msg):
    print '[OK] {0}'.format(msg).encode('utf-8')
    return True


def fail(msg):
    print '[FAIL] {0}'.format(msg).encode('utf-8')
    return False


def test_host_comments(hostname):
    comment = 'test{0:.4}'.format(random.random())
    add_command = 'ADD_HOST_COMMENT;%s;{persistent};{author};{comment}' % hostname
    del_command = 'DEL_HOST_COMMENT;{id}'
    comment_query = '\n'.join(['GET comments', 'Filter: type = 1',
                               'Filter: comment = {comment}',
                               'Columns: id'])

    send_command(add_command.format(persistent=0, author=USERNAME, comment=comment))
    comment_info = get_one(comment_query.format(comment=comment))
    if comment_info:
        success('Successfully added comment to host "{0}"'.format(hostname))
        send_command(del_command.format(id=comment_info['id']))
        if get_one(comment_query.format(comment=comment)):
            return fail('Could not remove comment with id #{0} from host "{1}"'
                        ''.format(comment_info['id'], hostname))
        return success('Successfully removed comment from host "{0}"'
                           ''.format(hostname))
    return fail('Could not add comment to host "{0}"'.format(hostname))


def test_service_comments(hostname, servicename):
    comment = 'test{0:.4}'.format(random.random())
    add_command = 'ADD_SVC_COMMENT;%s;%s;{persistent};{author}' \
                  ';{comment}' % (hostname, servicename)
    del_command = 'DEL_SVC_COMMENT;{id}'
    comment_query = '\n'.join(['GET comments', 'Filter: type = 2',
                               'Filter: comment = {comment}',
                               'Columns: id'])

    send_command(add_command.format(persistent=0, author=USERNAME, comment=comment))
    comment_info = get_one(comment_query.format(comment=comment))
    if comment_info:
        success('Successfully added comment to service "{0}" of host "{1}"'
                ''.format(servicename, hostname))
        send_command(del_command.format(id=comment_info['id']))
        if get_one(comment_query.format(comment=comment)):
            return fail('Could not remove comment with id #{0} from service "{1}"'
                        ''.format(comment_info['id'], servicename))
        return success('Successfully removed comment from service "{0}"'
                       ''.format(servicename))
    return fail('Could not add comment to service "{0}" of host "{1}"'
                ''.format(servicename, hostname))


def test_host_downtimes(hostname):
    comment = 'test{0:.4}'.format(random.random())
    start, end = time.time() + 20, time.time() + 320
    add_command = 'SCHEDULE_HOST_DOWNTIME;%s;{start};{end};1;0' \
                  ';0;{author};{comment}' % hostname
    del_command = 'DEL_HOST_DOWNTIME;{id}'
    downtime_query = '\n'.join(['GET downtimes', 'Filter: triggered_by = 0',
                                'Filter: duration = 0', 'Filter: fixed = 1',
                                'Filter: comment = {comment}',
                                'Columns: id'])

    send_command(add_command.format(start=start, end=end, author=USERNAME,
                                    comment=comment))
    downtime_info = get_one(downtime_query.format(comment=comment))
    if downtime_info:
        success('Successfully scheduled downtime for host "{0}"'.format(hostname))
        send_command(del_command.format(id=downtime_info['id']))
        if get_one(downtime_query.format(comment=comment)):
            return fail('Could not remove downtime for host "{0}"'.format(hostname))
        return success('Successfully removed downtime for host "{0}"'.format(hostname))
    return fail('Could not schedule downtime for host "{0}"'.format(hostname))


def test_service_downtimes(hostname, servicename):
    comment = 'test{0:.4}'.format(random.random())
    start, end = time.time() + 20, time.time() + 320
    add_command = 'SCHEDULE_SVC_DOWNTIME;%s;%s;{start};{end};1;0;0' \
                  ';{author};{comment}' % (hostname, servicename)
    del_command = 'DEL_SVC_DOWNTIME;{id}'
    downtime_query = '\n'.join(['GET downtimes', 'Filter: triggered_by = 0',
                                'Filter: duration = 0', 'Filter: fixed = 1',
                                'Filter: comment = {comment}',
                                'Columns: id'])

    send_command(add_command.format(start=start, end=end, author=USERNAME,
                                    comment=comment))
    downtime_info = get_one(downtime_query.format(comment=comment))
    if downtime_info:
        success('Successfully scheduled downtime for service "{0}" of host "{1}"'
                ''.format(servicename, hostname))
        send_command(del_command.format(id=downtime_info['id']))
        if get_one(downtime_query.format(comment=comment)):
            return fail('Could not remove downtime for service "{0}" of host "{1}"'
                        ''.format(servicename, hostname))
        return success('Successfully removed downtime for service "{0}" of host "{1}"'
                       ''.format(servicename, hostname))
    return fail('Could not schedule downtime for service "{0}" of host "{1}"'
                ''.format(servicename, hostname))


def test_host_problem_acknowledgements(hostname):
    comment = 'test{0:.4}'.format(random.random())
    send_command('PROCESS_HOST_CHECK_RESULT;{0};1;fail'.format(hostname))
    send_command('ACKNOWLEDGE_HOST_PROBLEM;{0};0;0;0;{1};{2}'
                 ''.format(hostname, USERNAME, comment))
    ack_info = get_one('GET comments\nFilter: comment = {0}'
                       '\nFilter: entry_type = 4\nColumns: id'.format(comment))
    if ack_info:
        success('Acknowledgement for host "{0}" has been processed'.format(hostname))
        host_info = get_one('GET hosts\nFilter: name = {0}'
                            '\nColumns: acknowledged'.format(hostname))
        if host_info['acknowledged'] != 1:
            return fail('Could not acknowledge problem on host "{0}"'.format(hostname))
    else:
        return fail('Acknowledgement for host "{0}" has not been processed'
                    ''.format(hostname))
    success('Successfully acknowledged problem on host "{0}"'.format(hostname))
    send_command('PROCESS_HOST_CHECK_RESULT;{0};0;ok'.format(hostname))
    if get_one('GET comments\nFilter: id = {0}'.format(ack_info['id'])):
        return fail('Non sticky acknowledgements are not removed if their host recovers')
    success('Non sticky acknowledgements are removed if their host recovers')

    comment = 'test{0:.4}'.format(random.random())
    send_command('PROCESS_HOST_CHECK_RESULT;{0};1;fail'.format(hostname))
    send_command('ACKNOWLEDGE_HOST_PROBLEM;{0};1;0;0;{1};{2}'
                 ''.format(hostname, USERNAME, comment))
    ack_info = get_one('GET comments\nFilter: comment = {0}'
                       '\nFilter: entry_type = 4\nColumns: id'.format(comment))
    send_command('PROCESS_HOST_CHECK_RESULT;{0};0;ok'.format(hostname))
    if not get_one('GET comments\nFilter: id = {0}'.format(ack_info['id'])):
        return fail('Sticky acknowledgements are removed if their host recovers')
    send_command('DEL_HOST_COMMENT;{0}'.format(ack_info['id']))
    success('Sticky acknowledgements need to be manually'
            ' removed once their host has recovered')

    host_info = get_one('GET hosts\nFilter: name = {0}\nColumns: acknowledged state'
                        ''.format(hostname))
    if host_info['state'] == 0 and host_info['acknowledged'] == 1:
        return fail('Host "{0}" is still acknowledged though it is not DOWN anymore'
                    ''.format(hostname))
    return success('Hosts are not acknowledged anymore once their state changes')


def test_remove_host_acknowledgements(hostname):
    comment = 'test{0:.4}'.format(random.random())
    send_command('PROCESS_HOST_CHECK_RESULT;{0};1;fail'.format(hostname))
    send_command('ACKNOWLEDGE_HOST_PROBLEM;{0};0;0;0;{1};{2}'
                 ''.format(hostname, USERNAME, comment))
    ack_info = get_one('GET comments\nFilter: comment = {0}\nColumns: id'
                       ''.format(comment))
    if not ack_info:
        return fail('Acknowledgement for host "{0}" has not been processed'
                    ''.format(hostname))
    send_command('REMOVE_HOST_ACKNOWLEDGEMENT;{0}'.format(hostname))
    if get_one('GET comments\nFilter: id = {0}'.format(ack_info['id'])):
        return fail('Acknowledgement related comments are not removed'
                    ' when manually removing an acknowledgement')
    return success('Acknowledgement related comments are removed when'
                   ' manually removing an acknowledgement')


def test_expiring_host_acknowledgements(hostname):
    comment, expire_time = 'test{0:.4}'.format(random.random()), time.time() + 5
    send_command('PROCESS_HOST_CHECK_RESULT;{0};1;fail'.format(hostname))
    send_command('ACKNOWLEDGE_HOST_PROBLEM_EXPIRE;{0};0;0;0;{1};{2};{3}'
                 ''.format(hostname, expire_time, USERNAME, comment))
    time.sleep(expire_time - time.time())
    host_info = get_one('GET hosts\nFilter: name = {0}\nColumns: acknowledged'
                        ''.format(hostname))
    if host_info['acknowledged'] == 1:
        send_command('REMOVE_HOST_ACKNOWLEDGEMENT;{0}'.format(hostname))
        return fail('Acknowledgements do not expire as desired')
    return success('Acknowledgements do expire as desired')


def test_change_host_check_command(hostname, command):
    old_command = get_one('GET hosts\nFilter: name = {0}\nColumns: check_command'
                          ''.format(hostname))['check_command']
    send_command('CHANGE_HOST_CHECK_COMMAND;{0};{1}'.format(hostname, command))
    host_info = get_one('GET hosts\nFilter: name = {0}\nColumns: check_command'
                        ''.format(hostname))
    if host_info['check_command'] != command:
        return fail('Could not change the check command of host "{0}" to "{1}"'
                    ''.format(hostname, command))
    send_command('CHANGE_HOST_CHECK_COMMAND;{0};{1}'.format(hostname, old_command))
    return success('Successfully changed check command of host "{0}" to "{1}"'
                   ''.format(hostname, command))


def test_change_host_check_timeperiod(hostname, period):
    old_period = get_one('GET hosts\nFilter: name = {0}\nColumns: check_period'
                         ''.format(hostname))['check_period']
    send_command('CHANGE_HOST_CHECK_TIMEPERIOD;{0};{1}'.format(hostname, period))
    host_info = get_one('GET hosts\nFilter: name = {0}\nColumns: check_period'
                        ''.format(hostname))
    if host_info['check_period'] != period:
        return fail('Could not change the check period of host "{0}" to "{1}"'
                    ''.format(hostname, period))
    send_command('CHANGE_HOST_CHECK_TIMEPERIOD;{0};{1}'.format(hostname, period))
    return success('Successfully changed check period of host "{0}" to "{1}"'
                   ''.format(hostname, period))


def test_change_host_modified_attributes(hostname):
    send_command('CHANGE_MAX_HOST_CHECK_ATTEMPTS;{0};1337'.format(hostname))
    restart_icinga()
    host_info = get_one('GET hosts\nFilter: name = {0}'
                        '\nColumns: max_check_attempts'.format(hostname))
    if host_info['max_check_attempts'] != 1337:
        return fail('Modified attributes of host "{0}" seem not to be '
                    'persisted between application restarts'.format(hostname))
    else:
        success('Modified attributes are being persisted'
                ' between application restarts')
    send_command('CHANGE_HOST_MODATTR;{0};0'.format(hostname))
    restart_icinga()
    host_info = get_one('GET hosts\nFilter: name = {0}'
                        '\nColumns: max_check_attempts'.format(hostname))
    if host_info['max_check_attempts'] == 1337:
        return fail('Re-setting the "modified attributes" value does not'
                    ' seem to invalidate any modified attributes')
    return success('Re-setting the "modified attributes" value seems to'
                   ' invalidate the modified attributes')


def test_change_host_max_check_attempts(hostname):
    old_value = get_one('GET hosts\nFilter: name = {0}'
                        '\nColumns: max_check_attempts'
                        ''.format(hostname))['max_check_attempts']
    send_command('CHANGE_MAX_HOST_CHECK_ATTEMPTS;{0};1234'.format(hostname))
    host_info = get_one('GET hosts\nFilter: name = {0}'
                        '\nColumns: max_check_attempts'.format(hostname))
    if host_info['max_check_attempts'] != 1234:
        return fail('Could not change the maximum number of check'
                    ' attempts for host "{0}"'.format(hostname))
    send_command('CHANGE_MAX_HOST_CHECK_ATTEMPTS;{0};{1}'.format(hostname,
                                                                 old_value))
    return success('Successfully changed maximum number of check'
                   ' attempts for host "{0}"'.format(hostname))


def test_change_service_max_check_attempts(hostname, servicename):
    old_value = get_one('GET services\nFilter: host_name = {0}'
                        '\nFilter: description = {1}'
                        '\nColumns: max_check_attempts'
                        ''.format(hostname, servicename))['max_check_attempts']
    send_command('CHANGE_MAX_SVC_CHECK_ATTEMPTS;{0};{1};1234'
                 ''.format(hostname, servicename))
    svc_info = get_one('GET services\nFilter: host_name = {0}'
                       '\nFilter: description = {1}'
                       '\nColumns: max_check_attempts'.format(hostname,
                                                              servicename))
    if svc_info['max_check_attempts'] != 1234:
        return fail('Could not change the maximum number of check attempts for '
                    'service "{0}" on host "{1}"'.format(servicename, hostname))
    send_command('CHANGE_MAX_SVC_CHECK_ATTEMPTS;{0};{1};{2}'
                 ''.format(hostname, servicename, old_value))
    return success('Successfully changed maximum number of check attempts '
                   'for service "{0}" on host "{1}"'.format(servicename,
                                                            hostname))


def test_change_host_normal_check_interval(hostname):
    old_value = get_one('GET hosts\nFilter: name = {0}\nColumns: check_interval'
                        ''.format(hostname))['check_interval']
    send_command('CHANGE_NORMAL_HOST_CHECK_INTERVAL;{0};7200'.format(hostname))
    host_info = get_one('GET hosts\nFilter: name = {0}\nColumns: check_interval'
                        ''.format(hostname))
    if host_info['check_interval'] != 7200:
        return fail('Could not change the check interval of host "{0}"'
                    ''.format(hostname))
    send_command('CHANGE_NORMAL_HOST_CHECK_INTERVAL;{0};{1}'.format(hostname,
                                                                    old_value))
    return success('Successfully changed check interval of host "{0}"'
                   ''.format(hostname))


def test_change_service_normal_check_interval(hostname, servicename):
    old_value = get_one('GET services\nFilter: host_name = {0}'
                        '\nFilter: description = {1}'
                        '\nColumns: check_interval'
                        ''.format(hostname, servicename))['check_interval']
    send_command('CHANGE_NORMAL_SVC_CHECK_INTERVAL;{0};{1};7200'
                 ''.format(hostname, servicename))
    svc_info = get_one('GET services\nFilter: host_name = {0}'
                       '\nFilter: description = {1}'
                       '\nColumns: check_interval'
                       ''.format(hostname, servicename))
    if svc_info['check_interval'] != 7200:
        return fail('Could not change the check interval of service "{0}"'
                    ' on host "{1}"'.format(servicename, hostname))
    send_command('CHANGE_NORMAL_SVC_CHECK_INTERVAL;{0};{1};{2}'
                 ''.format(hostname, servicename, old_value))
    return success('Successfully changed check interval of service '
                   '"{0}" on host "{1}"'.format(servicename, hostname))


def test_change_host_retry_check_interval(hostname):
    old_value = get_one('GET hosts\nFilter: name = {0}\nColumns: retry_interval'
                        ''.format(hostname))['retry_interval']
    send_command('CHANGE_RETRY_HOST_CHECK_INTERVAL;{0};3600'.format(hostname))
    host_info = get_one('GET hosts\nFilter: name = {0}\nColumns: retry_interval'
                        ''.format(hostname))
    if host_info['retry_interval'] != 3600:
        return fail('Could not change the retry interval of host "{0}"'
                    ''.format(hostname))
    send_command('CHANGE_RETRY_HOST_CHECK_INTERVAL;{0};{1}'.format(hostname,
                                                                   old_value))
    return success('Successfully changed retry interval of host "{0}"'
                   ''.format(hostname))


def test_change_service_retry_check_interval(hostname, servicename):
    old_value = get_one('GET services\nFilter: host_name = {0}'
                        '\nFilter: description = {1}'
                        '\nColumns: retry_interval'
                        ''.format(hostname, servicename))['retry_interval']
    send_command('CHANGE_RETRY_SVC_CHECK_INTERVAL;{0};{1};3600'
                 ''.format(hostname, servicename))
    svc_info = get_one('GET services\nFilter: host_name = {0}'
                       '\nFilter: description = {1}'
                       '\nColumns: retry_interval'
                       ''.format(hostname, servicename))
    if svc_info['retry_interval'] != 3600:
        return fail('Could not change retry interval of service "{0}"'
                    ' on host "{1}"'.format(servicename, hostname))
    send_command('CHANGE_RETRY_SVC_CHECK_INTERVAL;{0};{1};{2}'
                 ''.format(hostname, servicename, old_value))
    return success('Successfully changed retry interval of service "{0}"'
                   ' on host "{1}"'.format(servicename, hostname))


def test_change_service_check_command(hostname, servicename, command):
    old_value = get_one('GET services\nFilter: host_name = {0}'
                        '\nFilter: description = {1}'
                        '\nColumns: check_command'
                        ''.format(hostname, servicename))['check_command']
    send_command('CHANGE_SVC_CHECK_COMMAND;{0};{1};{2}'
                 ''.format(hostname, servicename, command))
    svc_info = get_one('GET services\nFilter: host_name = {0}'
                       '\nFilter: description = {1}'
                       '\nColumns: check_command'
                       ''.format(hostname, servicename))
    if svc_info['check_command'] != command:
        return fail('Could not change the check command of service "{0}" on '
                    'host "{1}" to "{2}"'.format(servicename, hostname, command))
    send_command('CHANGE_SVC_CHECK_COMMAND;{0};{1};{2}'
                 ''.format(hostname, servicename, old_value))
    return success('Successfully changed check command of service "{0}" on'
                   ' host "{1}"'.format(servicename, hostname))


def test_change_service_check_timeperiod(hostname, servicename, period):
    old_value = get_one('GET services\nFilter: host_name = {0}'
                        '\nFilter: description = {1}'
                        '\nColumns: check_period'
                        ''.format(hostname, servicename))['check_period']
    send_command('CHANGE_SVC_CHECK_TIMEPERIOD;{0};{1};{2}'
                 ''.format(hostname, servicename, period))
    svc_info = get_one('GET services\nFilter: host_name = {0}'
                       '\nFilter: description = {1}'
                       '\nColumns: check_period'
                       ''.format(hostname, servicename))
    if svc_info['check_period'] != period:
        return fail('Could not change the check period of service "{0}" on host'
                    ' "{1}" to "{2}"'.format(servicename, hostname, period))
    send_command('CHANGE_SVC_CHECK_TIMEPERIOD;{0};{1};{2}'
                 ''.format(hostname, servicename, old_value))
    return success('Successfully changed check period of service "{0}"'
                   ' on host "{1}"'.format(servicename, hostname))


def test_delay_host_notification(hostname):
    # This test assumes that the notification interval
    # for the given host is set to 10 seconds
    send_command('DISABLE_HOST_CHECK;{0}'.format(hostname))
    for _ in xrange(MAX_CHECK_ATTEMPTS):
        send_command('PROCESS_HOST_CHECK_RESULT;{0};2;down'.format(hostname)) # TODO: Should be 1 (DOWN), not 2 (UNREACHABLE)
    state_info = get_one('GET hosts\nFilter: name = {0}'
                         '\nColumns: state state_type last_hard_state_change'
                         ''.format(hostname))
    if state_info['state'] != 1 or state_info['state_type'] != 1:
        send_command('ENABLE_HOST_CHECK;{0}'.format(hostname))
        return fail('Could not switch state of host "{0}"'
                    ' to DOWN (HARD)'.format(hostname))
    time.sleep(1)
    note_info1 = get_one('GET hosts\nFilter: name = {0}'
                         '\nColumns: last_notification'.format(hostname))
    if not -1 < (note_info1['last_notification'] - \
            state_info['last_hard_state_change']) < 1:
        send_command('ENABLE_HOST_CHECK;{0}'.format(hostname))
        return fail('Switching host "{0}" to state DOWN (HARD) does not '
                    'cause a notification being sent out'.format(hostname))
    send_command('DELAY_HOST_NOTIFICATION;{0};{1}'
                 ''.format(hostname, note_info1['last_notification'] + 20))
    time.sleep(5 + 10 - (time.time() - note_info1['last_notification']))
    note_info2 = get_one('GET hosts\nFilter: name = {0}'
                         '\nColumns: last_notification'.format(hostname))
    if note_info2['last_notification'] != note_info1['last_notification']:
        send_command('ENABLE_HOST_CHECK;{0}'.format(hostname))
        return fail('There were a notification being sent out for host '
                    '"{0}" before the time that it should be delayed to'
                    ''.format(hostname))
    time.sleep(5 + note_info1['last_notification'] + 20 - time.time())
    send_command('ENABLE_HOST_CHECK;{0}'.format(hostname))
    note_info3 = get_one('GET hosts\nFilter: name = {0}'
                         '\nColumns: last_notification'.format(hostname))
    if note_info3['last_notification'] < note_info1['last_notification'] + 20:
        return fail('Could not delay notification for'
                    ' host "{0}"'.format(hostname))
    return success('Successfully delayed notification'
                   ' for host "{0}"'.format(hostname))


def test_delay_service_notification(hostname, servicename):
    # This test assumes that the notification interval
    # for the given service is set to 10 seconds
    send_command('DISABLE_SVC_CHECK;{0};{1}'.format(hostname, servicename))
    for _ in xrange(MAX_CHECK_ATTEMPTS):
        send_command('PROCESS_SERVICE_CHECK_RESULT;{0};{1};2;critical'
                     ''.format(hostname, servicename))
    state_info = get_one('GET services\nFilter: host_name = {0}'
                         '\nFilter: description = {1}'
                         '\nColumns: state state_type last_hard_state_change'
                         ''.format(hostname, servicename))
    if state_info['state'] != 2 or state_info['state_type'] != 1:
        send_command('ENABLE_SVC_CHECK;{0};{1}'.format(hostname, servicename))
        return fail('Could not switch state of service "{0}" on host "{1}"'
                    ' to CRITICAL (HARD)'.format(servicename, hostname))
    time.sleep(1)
    note_info1 = get_one('GET services\nFilter: host_name = {0}'
                         '\nFilter: description = {1}'
                         '\nColumns: last_notification'
                         ''.format(hostname, servicename))
    if not -1 < (note_info1['last_notification'] - \
            state_info['last_hard_state_change']) < 1:
        send_command('ENABLE_SVC_CHECK;{0};{1}'.format(hostname, servicename))
        return fail('Switching service "{0}" on host "{1}" to state CRITICAL '
                    '(HARD) does not cause a notification being sent out'
                    ''.format(servicename, hostname))
    send_command('DELAY_SVC_NOTIFICATION;{0};{1};{2}'
                 ''.format(hostname, servicename,
                           note_info1['last_notification'] + 20))
    time.sleep(5 + 10 - (time.time() - note_info1['last_notification']))
    note_info2 = get_one('GET services\nFilter: host_name = {0}'
                         '\nFilter: description = {1}'
                         '\nColumns: last_notification'
                         ''.format(hostname, servicename))
    if note_info2['last_notification'] != note_info1['last_notification']:
        send_command('ENABLE_SVC_CHECK;{0};{1}'.format(hostname, servicename))
        return fail('There were a notification being sent out for service "{0}" '
                    'on host "{1}" before the time that it should be delayed to'
                    ''.format(servicename, hostname))
    time.sleep(5 + note_info1['last_notification'] + 20 - time.time())
    send_command('ENABLE_SVC_CHECK;{0};{1}'.format(hostname, servicename))
    note_info3 = get_one('GET services\nFilter: host_name = {0}'
                         '\nFilter: description = {1}'
                         '\nColumns: last_notification'
                         ''.format(hostname, servicename))
    if note_info3['last_notification'] < note_info1['last_notification'] + 20:
        return fail('Could not delay notification for service "{0}"'
                    ' on host "{0}"'.format(servicename, hostname))
    return success('Successfully delayed notification for service "{0}"'
                   ' on host "{0}"'.format(servicename, hostname))


def main():
    failure = test_host_comments('localhost')
    failure = test_host_comments('nsca-ng')

    failure = test_service_comments('localhost', 'disk')
    failure = test_service_comments('nsca-ng', 'PassiveService1')

    failure = test_host_downtimes('localhost')
    failure = test_host_downtimes('nsca-ng')

    failure = test_service_downtimes('localhost', 'disk')
    failure = test_service_downtimes('nsca-ng', 'PassiveService1')

    failure = test_host_problem_acknowledgements('localhost')
    failure = test_remove_host_acknowledgements('localhost')
    failure = test_expiring_host_acknowledgements('localhost')

    failure = test_change_host_check_command('localhost', 'disk')
    failure = test_change_service_check_command('localhost', 'disk', 'ping4')
    failure = test_change_host_check_timeperiod('localhost', 'none')
    failure = test_change_service_check_timeperiod('localhost', 'disk', 'none')
    failure = test_change_host_max_check_attempts('localhost')
    failure = test_change_service_max_check_attempts('localhost', 'disk')
    failure = test_change_host_normal_check_interval('localhost')
    failure = test_change_service_normal_check_interval('localhost', 'disk')
    failure = test_change_host_retry_check_interval('localhost')
    failure = test_change_service_retry_check_interval('localhost', 'disk')
    failure = test_change_host_modified_attributes('localhost')

    failure = test_delay_service_notification('localhost', 'disk')
    failure = test_delay_host_notification('localhost')

    return 1 if failure else 0


if __name__ == '__main__':
    with utils.LiveStatusSocket('/var/run/icinga2/cmd/livestatus') as LIVESTATUS:
        sys.exit(main())

