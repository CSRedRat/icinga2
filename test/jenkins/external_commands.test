#!/usr/bin/env python
from __future__ import unicode_literals

import sys
import time
import random

import utils


USERNAME = 'Icinga 2 Admin'


def send_command(command):
    return send_query('COMMAND [{0}] {1}'.format(int(time.time()), command))


def send_query(query):
    response = LIVESTATUS.query(query + '\nColumnHeaders: on')
    if response:
        header, result = response.pop(0), {}
        return [dict((header[i], v) for i, v in enumerate(r)) for r in response]
    return []


def get_one(query):
    return next(iter(send_query(query)), {})


def success(msg):
    print '[OK] {0}'.format(msg).encode('utf-8')
    return True


def fail(msg):
    print '[FAIL] {0}'.format(msg).encode('utf-8')
    return False


def test_host_comments(hostname):
    comment = 'test{0:.4}'.format(random.random())
    add_command = 'ADD_HOST_COMMENT;%s;{persistent};{author};{comment}' % hostname
    del_command = 'DEL_HOST_COMMENT;{id}'
    comment_query = '\n'.join(['GET comments', 'Filter: type = 1',
                               'Filter: comment = {comment}',
                               'Columns: id'])

    send_command(add_command.format(persistent=0, author=USERNAME, comment=comment))
    comment_info = get_one(comment_query.format(comment=comment))
    if comment_info:
        success('Successfully added comment to host "{0}"'.format(hostname))
        send_command(del_command.format(id=comment_info['id']))
        if get_one(comment_query.format(comment=comment)):
            return fail('Could not remove comment with id #{0} from host "{1}"'
                        ''.format(comment_info['id'], hostname))
        return success('Successfully removed comment from host "{0}"'
                           ''.format(hostname))
    return fail('Could not add comment to host "{0}"'.format(hostname))


def test_service_comments(hostname, servicename):
    comment = 'test{0:.4}'.format(random.random())
    add_command = 'ADD_SVC_COMMENT;%s;%s;{persistent};{author}' \
                  ';{comment}' % (hostname, servicename)
    del_command = 'DEL_SVC_COMMENT;{id}'
    comment_query = '\n'.join(['GET comments', 'Filter: type = 2',
                               'Filter: comment = {comment}',
                               'Columns: id'])

    send_command(add_command.format(persistent=0, author=USERNAME, comment=comment))
    comment_info = get_one(comment_query.format(comment=comment))
    if comment_info:
        success('Successfully added comment to service "{0}" of host "{1}"'
                ''.format(servicename, hostname))
        send_command(del_command.format(id=comment_info['id']))
        if get_one(comment_query.format(comment=comment)):
            return fail('Could not remove comment with id #{0} from service "{1}"'
                        ''.format(comment_info['id'], servicename))
        return success('Successfully removed comment from service "{0}"'
                       ''.format(servicename))
    return fail('Could not add comment to service "{0}" of host "{1}"'
                ''.format(servicename, hostname))


def test_host_downtimes(hostname):
    comment = 'test{0:.4}'.format(random.random())
    start, end = time.time() + 20, time.time() + 320
    add_command = 'SCHEDULE_HOST_DOWNTIME;%s;{start};{end};1;0' \
                  ';0;{author};{comment}' % hostname
    del_command = 'DEL_HOST_DOWNTIME;{id}'
    downtime_query = '\n'.join(['GET downtimes', 'Filter: triggered_by = 0',
                                'Filter: duration = 0', 'Filter: fixed = 1',
                                'Filter: comment = {comment}',
                                'Columns: id'])

    send_command(add_command.format(start=start, end=end, author=USERNAME,
                                    comment=comment))
    downtime_info = get_one(downtime_query.format(comment=comment))
    if downtime_info:
        success('Successfully scheduled downtime for host "{0}"'.format(hostname))
        send_command(del_command.format(id=downtime_info['id']))
        if get_one(downtime_query.format(comment=comment)):
            return fail('Could not remove downtime for host "{0}"'.format(hostname))
        return success('Successfully removed downtime for host "{0}"'.format(hostname))
    return fail('Could not schedule downtime for host "{0}"'.format(hostname))


def test_service_downtimes(hostname, servicename):
    comment = 'test{0:.4}'.format(random.random())
    start, end = time.time() + 20, time.time() + 320
    add_command = 'SCHEDULE_SVC_DOWNTIME;%s;%s;{start};{end};1;0;0' \
                  ';{author};{comment}' % (hostname, servicename)
    del_command = 'DEL_SVC_DOWNTIME;{id}'
    downtime_query = '\n'.join(['GET downtimes', 'Filter: triggered_by = 0',
                                'Filter: duration = 0', 'Filter: fixed = 1',
                                'Filter: comment = {comment}',
                                'Columns: id'])

    send_command(add_command.format(start=start, end=end, author=USERNAME,
                                    comment=comment))
    downtime_info = get_one(downtime_query.format(comment=comment))
    if downtime_info:
        success('Successfully scheduled downtime for service "{0}" of host "{1}"'
                ''.format(servicename, hostname))
        send_command(del_command.format(id=downtime_info['id']))
        if get_one(downtime_query.format(comment=comment)):
            return fail('Could not remove downtime for service "{0}" of host "{1}"'
                        ''.format(servicename, hostname))
        return success('Successfully removed downtime for service "{0}" of host "{1}"'
                       ''.format(servicename, hostname))
    return fail('Could not schedule downtime for service "{0}" of host "{1}"'
                ''.format(servicename, hostname))


def test_host_problem_acknowledgements(hostname):
    comment = 'test{0:.4}'.format(random.random())
    send_command('PROCESS_HOST_CHECK_RESULT;{0};2;fail'.format(hostname))
    send_command('ACKNOWLEDGE_HOST_PROBLEM;{0};0;0;0;{1};{2}'
                 ''.format(hostname, USERNAME, comment))
    ack_info = get_one('GET comments\nFilter: comment = {0}'
                       '\nFilter: entry_type = 4\nColumns: id'.format(comment))
    if ack_info:
        success('Acknowledgement for host "{0}" has been processed'.format(hostname))
        host_info = get_one('GET hosts\nFilter: name = {0}'
                            '\nColumns: acknowledged'.format(hostname))
        if host_info['acknowledged'] != 1:
            return fail('Could not acknowledge problem on host "{0}"'.format(hostname))
    else:
        return fail('Acknowledgement for host "{0}" has not been processed'
                    ''.format(hostname))
    success('Successfully acknowledged problem on host "{0}"'.format(hostname))
    send_command('PROCESS_HOST_CHECK_RESULT;{0};0;ok'.format(hostname))
    if get_one('GET comments\nFilter: id = {0}'.format(ack_info['id'])):
        return fail('Non sticky acknowledgements are not removed if their host recovers')
    success('Non sticky acknowledgements are removed if their host recovers')

    comment = 'test{0:.4}'.format(random.random())
    send_command('PROCESS_HOST_CHECK_RESULT;{0};2;fail'.format(hostname))
    send_command('ACKNOWLEDGE_HOST_PROBLEM;{0};1;0;0;{1};{2}'
                 ''.format(hostname, USERNAME, comment))
    ack_info = get_one('GET comments\nFilter: comment = {0}'
                       '\nFilter: entry_type = 4\nColumns: id'.format(comment))
    send_command('PROCESS_HOST_CHECK_RESULT;{0};0;ok'.format(hostname))
    if not get_one('GET comments\nFilter: id = {0}'.format(ack_info['id'])):
        return fail('Sticky acknowledgements are removed if their host recovers')
    send_command('DEL_HOST_COMMENT;{0}'.format(ack_info['id']))
    success('Sticky acknowledgements need to be manually'
            ' removed once their host has recovered')

    host_info = get_one('GET hosts\nFilter: name = {0}\nColumns: acknowledged state'
                        ''.format(hostname))
    if host_info['state'] != 2 and host_info['acknowledged'] == 1:
        return fail('Host "{0}" is still acknowledged though it is not DOWN anymore'
                    ''.format(hostname))
    return success('Hosts are not acknowledged anymore once their state changes')


def test_remove_host_acknowledgements(hostname):
    comment = 'test{0:.4}'.format(random.random())
    send_command('PROCESS_HOST_CHECK_RESULT;{0};2;fail'.format(hostname))
    send_command('ACKNOWLEDGE_HOST_PROBLEM;{0};0;0;0;{1};{2}'
                 ''.format(hostname, USERNAME, comment))
    ack_info = get_one('GET comments\nFilter: comment = {0}\nColumns: id'
                       ''.format(comment))
    if not ack_info:
        return fail('Acknowledgement for host "{0}" has not been processed'
                    ''.format(hostname))
    send_command('REMOVE_HOST_ACKNOWLEDGEMENT;{0}'.format(hostname))
    if get_one('GET comments\nFilter: id = {0}'.format(ack_info['id'])):
        return fail('Acknowledgement related comments are not removed'
                    ' when manually removing an acknowledgement')
    return success('Acknowledgement related comments are removed when'
                   ' manually removing an acknowledgement')


def test_expiring_host_acknowledgements(hostname):
    comment, expire_time = 'test{0:.4}'.format(random.random()), time.time() + 5
    send_command('PROCESS_HOST_CHECK_RESULT;{0};2;fail'.format(hostname))
    send_command('ACKNOWLEDGE_HOST_PROBLEM_EXPIRE;{0};0;0;0;{1};{2};{3}'
                 ''.format(hostname, expire_time, USERNAME, comment))
    time.sleep(expire_time - time.time())
    host_info = get_one('GET hosts\nFilter: name = {0}\nColumns: acknowledged'
                        ''.format(hostname))
    if host_info['acknowledged'] == 1:
        send_command('REMOVE_HOST_ACKNOWLEDGEMENT;{0}'.format(hostname))
        return fail('Acknowledgements do not expire as desired')
    return success('Acknowledgements do expire as desired')


def main():
    failure = test_host_comments('localhost')
    failure = test_host_comments('nsca-ng')

    failure = test_service_comments('localhost', 'disk')
    failure = test_service_comments('nsca-ng', 'PassiveService1')

    failure = test_host_downtimes('localhost')
    failure = test_host_downtimes('nsca-ng')

    failure = test_service_downtimes('localhost', 'disk')
    failure = test_service_downtimes('nsca-ng', 'PassiveService1')

    failure = test_host_problem_acknowledgements('localhost')
    failure = test_remove_host_acknowledgements('localhost')
    failure = test_expiring_host_acknowledgements('localhost')

    return 1 if failure else 0


if __name__ == '__main__':
    with utils.LiveStatusSocket('/var/run/icinga2/cmd/livestatus') as LIVESTATUS:
        sys.exit(main())

